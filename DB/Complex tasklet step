import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.StepExecutionListener;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.jdbc.core.JdbcTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
@StepScope
public class FinalTasklet implements Tasklet {

    private static final Logger log = LoggerFactory.getLogger(FinalTasklet.class);

    @Autowired
    private JobRepository jobRepository;  // For accessing job and step data

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {

        // Retrieve StepExecution for "myStep" (the step you want to check)
        StepExecution previousStepExecution = jobRepository.getLastStepExecution(chunkContext.getStepContext().getJobInstance(), "myStep");

        if (previousStepExecution == null || !previousStepExecution.getStatus().isCompleted()) {
            // Previous step did not complete successfully
            log.warn("Previous step 'myStep' was not completed successfully.");
            return RepeatStatus.FINISHED;
        }

        // If the previous step is completed, proceed with the update
        log.info("Previous step 'myStep' was completed successfully. Proceeding with update.");

        // SQL query to update MY_TABLE and set COLX = 1
        String updateQuery = "UPDATE MY_TABLE SET COLX = 1";
        jdbcTemplate.update(updateQuery);

        log.info("Database updated successfully.");

        return RepeatStatus.FINISHED;
    }
}




@Bean
public Step finalStep(StepBuilderFactory stepBuilderFactory, FinalTasklet finalTasklet, PlatformTransactionManager transactionManager) {
    return stepBuilderFactory.get("finalStep")
        .tasklet(finalTasklet, transactionManager)
        .build();
}





@Bean
public Job myJob(JobBuilderFactory jobBuilderFactory, Step myStep, Step testStep, Step finalStep, JobRepository jobRepository) {
    return jobBuilderFactory.get("myJob")
        .incrementer(new RunIdIncrementer())  // Adds an incrementer for job ID
        .start(myStep)  // Start with the main chunk-based step
        .next(testStep) // Proceed to the tasklet-based step
        .next(finalStep) // Proceed to final step
        .repository(jobRepository)  // Specify the job repository
        .build();
}
