import java.io.File;

import java.io.File;

public class FileService {

    // Method to delete a file from the mounted PVC
    public boolean deleteFileFromPVC(String filePath) {
        // Create a File object pointing to the file in the PVC mount
        File file = new File(filePath);

        // Check if the file exists
        if (file.exists()) {
            // Check if it's a file, not a directory
            if (file.isFile()) {
                // Delete the file and return the result
                return file.delete();
            } else {
                System.out.println("Cannot delete, it's a folder: " + filePath);
                return false;
            }
        } else {
            System.out.println("File not found: " + filePath);
            return false;
        }
    }
}






import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class FileController {

    private final FileService fileService;

    public FileController(FileService fileService) {
        this.fileService = fileService;
    }

    @DeleteMapping("/delete-file")
    public String deleteFile(@RequestParam String filePath) {
        boolean result = fileService.deleteFileFromPVC(filePath);

        if (result) {
            return "File deleted successfully!";
        } else {
            return "File deletion failed or file not found!";
        }
    }
}



import org.springframework.stereotype.Service;

import java.io.File;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Service
public class FileService {

    // Method to return a list of strings representing files and folders
    public List<String> listFilesAndFolders(String directoryPath) {
        // Create a File object pointing to the directory
        File directory = new File(directoryPath);

        // Check if the directory exists and is indeed a directory
        if (directory.exists() && directory.isDirectory()) {
            // Use streams to process the directory contents
            return Stream.of(directory.listFiles())
                    .map(file -> file.getName() + (file.isFile() ? " IS_FILE" : ""))
                    .collect(Collectors.toList());
        } else {
            throw new IllegalArgumentException("Invalid directory path: " + directoryPath);
        }
    }
}







<div ng-app="myApp" ng-controller="MyController as ctrl">
    <table>
        <tr ng-repeat="item in ctrl.items">
            <!-- Display the string -->
            <td>{{ item }}</td>

            <!-- Conditional 'X' button, shown only if the string ends with 'PROC' -->
            <td ng-if="item.endsWith('PROC')">
                <span ng-click="ctrl.deleteItem($index)" style="cursor: pointer; color: red; margin-left: 10px;">&#10006;</span>
            </td>
        </tr>
    </table>
</div>






module myApp {
    export class MyController {
        public isListVisible: boolean;
        public items: string[];

        constructor() {
            // Initially, the list is hidden
            this.isListVisible = false;

            // List of items
            this.items = ['Item 1', 'Item 2', 'Item 3'];
        }

        // Function to toggle the visibility of the list
        public toggleList(): void {
            this.isListVisible = !this.isListVisible;
        }

        // Function to delete an item from the list
        public deleteItem(index: number): void {
            this.items.splice(index, 1);
        }
    }

    // Register the controller with the AngularJS app
    angular.module('myApp', [])
        .controller('MyController', MyController);
}





import * as path from 'path';

function getFileName(filePath: string): string {
    return '/' + path.basename(filePath); // Add leading slash to the file name
}

// Example usage:
const filePath = '/etc/config/props/file1.txt';
console.log(getFileName(filePath)); // Output: /file1.txt



OR




function getFileName(filePath: string): string {
    const fileName = filePath.substring(filePath.lastIndexOf('/'));
    return fileName; // Already starts with '/' because of lastIndexOf('/')
}

// Example usage:
const filePath = '/etc/config/props/file1.txt';
console.log(getFileName(filePath)); // Output: /file1.txt
