READ FILES/FOLDERS/ZIP:



import com.hierynomus.msdtyp.AccessMask;
import com.hierynomus.msfscc.fileinformation.FileIdBothDirectoryInformation;
import com.hierynomus.protocol.commons.EnumWithValue.EnumUtils;
import com.hierynomus.smbj.SMBClient;
import com.hierynomus.smbj.auth.AuthenticationContext;
import com.hierynomus.smbj.connection.Connection;
import com.hierynomus.smbj.session.Session;
import com.hierynomus.smbj.share.DiskShare;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.logging.Level;
import java.util.logging.Logger;

@Service
public class FolderService {

    private static final Pattern DATE_PATTERN = Pattern.compile("\\b(\\d{8})\\b");
    private static final Logger LOGGER = Logger.getLogger(FolderService.class.getName());
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMdd");

    public void deleteOldFilesAndFolders(String folderName) {
        try (SMBClient client = new SMBClient()) {
            try (Connection connection = client.connect("your-smb-server")) {
                AuthenticationContext ac = new AuthenticationContext("username", "password".toCharArray(), "domain");
                Session session = connection.authenticate(ac);

                try (DiskShare share = (DiskShare) session.connectShare("your-share")) {
                    if (!share.folderExists(folderName)) {
                        throw new IllegalArgumentException("The provided path is not a directory or does not exist");
                    }

                    List<FileIdBothDirectoryInformation> files = share.list(folderName, "*");

                    LocalDate currentDate = LocalDate.now();

                    for (FileIdBothDirectoryInformation fileInfo : files) {
                        try {
                            String fileName = fileInfo.getFileName();
                            Matcher matcher = DATE_PATTERN.matcher(fileName);

                            if (matcher.find()) {
                                LocalDate fileDate = LocalDate.parse(matcher.group(1), DATE_FORMATTER);
                                if (ChronoUnit.YEARS.between(fileDate, currentDate) > 2) {
                                    deleteFileOrFolder(share, folderName, fileName);
                                }
                            }
                        } catch (Exception e) {
                            LOGGER.log(Level.WARNING, "Error processing file: " + fileInfo.getFileName(), e);
                        }
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error accessing folder: " + folderName, e);
        }
    }

    private void deleteFileOrFolder(DiskShare share, String folderName, String fileName) throws IOException {
        String fullPath = folderName + "\\" + fileName;
        if (share.fileExists(fullPath) || share.folderExists(fullPath)) {
            share.rm(fullPath);
        }
    }
}






UNIT TEST:



import com.hierynomus.smbj.share.DiskShare;
import com.hierynomus.smbj.share.FileIdBothDirectoryInformation;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;

public class FolderServiceTest {

    @InjectMocks
    private FolderService folderService;

    @Mock
    private DiskShare diskShare;

    @Mock
    private FileIdBothDirectoryInformation mockFile1;

    @Mock
    private FileIdBothDirectoryInformation mockFile2;

    @Mock
    private FileIdBothDirectoryInformation mockFile3;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testDeleteOldFilesAndFolders() throws IOException {
        String folderName = "testFolder";
        when(diskShare.folderExists(folderName)).thenReturn(true);

        when(mockFile1.getFileName()).thenReturn("folder20220101test1");
        when(mockFile2.getFileName()).thenReturn("archive20200101.zip");
        when(mockFile3.getFileName()).thenReturn("file20230510.txt");

        List<FileIdBothDirectoryInformation> files = Arrays.asList(mockFile1, mockFile2, mockFile3);
        when(diskShare.list(folderName, "*")).thenReturn(files);

        doNothing().when(diskShare).rm(folderName + "\\folder20220101test1");
        doNothing().when(diskShare).rm(folderName + "\\archive20200101.zip");

        folderService.deleteOldFilesAndFolders(folderName);

        verify(diskShare, times(1)).rm(folderName + "\\folder20220101test1"); // The folder20220101test1 should be deleted
        verify(diskShare, times(1)).rm(folderName + "\\archive20200101.zip"); // The archive20200101.zip should be deleted
        verify(diskShare, never()).rm(folderName + "\\file20230510.txt"); // The file20230510.txt should not be deleted
    }
}
