Improved Version With Partition Existence Check:



CREATE OR REPLACE PROCEDURE truncate_partition(p_table_name IN VARCHAR2, p_date IN DATE) AS
    v_last_day DATE;
    v_partition_date DATE;
    v_sql VARCHAR2(1000);
    v_partition_type VARCHAR2(10);
    v_partition_exists NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Starting truncate_partition procedure...');
    DBMS_OUTPUT.PUT_LINE('Table Name: ' || p_table_name);
    DBMS_OUTPUT.PUT_LINE('Input Date: ' || TO_CHAR(p_date, 'DD-MON-YYYY'));

    -- Get partitioning type (RANGE = monthly partitions, otherwise assume daily)
    BEGIN
        SELECT partitioning_type 
        INTO v_partition_type
        FROM user_part_tables
        WHERE table_name = UPPER(p_table_name);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error: Table not found in USER_PART_TABLES.');
            RETURN;
    END;

    DBMS_OUTPUT.PUT_LINE('Partition Type: ' || v_partition_type);

    -- Determine correct partition key
    IF v_partition_type = 'RANGE' THEN
        v_partition_date := LAST_DAY(p_date);
        DBMS_OUTPUT.PUT_LINE('Computed Monthly Partition Date: ' || TO_CHAR(v_partition_date, 'DD-MON-YYYY'));
    ELSE
        v_partition_date := p_date;
        DBMS_OUTPUT.PUT_LINE('Computed Daily Partition Date: ' || TO_CHAR(v_partition_date, 'DD-MON-YYYY'));
    END IF;

    -- Check if the partition exists
    SELECT COUNT(*)
    INTO v_partition_exists
    FROM user_tab_partitions
    WHERE table_name = UPPER(p_table_name)
      AND partition_name = (
          SELECT partition_name FROM user_tab_partitions 
          WHERE table_name = UPPER(p_table_name)
          AND high_value = TO_CHAR(v_partition_date, 'YYYYMMDD')
      );

    IF v_partition_exists = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No matching partition found. No action taken.');
        RETURN;
    END IF;

    -- Construct the ALTER TABLE command dynamically
    v_sql := 'ALTER TABLE ' || p_table_name || ' TRUNCATE PARTITION FOR (''' || 
             TO_CHAR(v_partition_date, 'DD-MON-YYYY') || ''') UPDATE INDEXES';

    DBMS_OUTPUT.PUT_LINE('Executing SQL: ' || v_sql);

    -- Execute the statement
    EXECUTE IMMEDIATE v_sql;

    DBMS_OUTPUT.PUT_LINE('SQL execution successful. Partition truncated.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END truncate_partition;
/




Scenario 1: Partition Exists




BEGIN
    truncate_partition('TABLE_X', TO_DATE('30-JAN-2023', 'DD-MON-YYYY'));
END;
/




Output:



Partition Type: RANGE
Computed Monthly Partition Date: 31-JAN-2023
Executing SQL: ALTER TABLE TABLE_X TRUNCATE PARTITION FOR ('31-JAN-2023') UPDATE INDEXES
SQL execution successful. Partition truncated.



Scenario 2: Partition Does Not Exist




BEGIN
    truncate_partition('TABLE_X', TO_DATE('15-DEC-2022', 'DD-MON-YYYY'));
END;
/



Output:



Partition Type: RANGE
Computed Monthly Partition Date: 31-DEC-2022
No matching partition found. No action taken.
