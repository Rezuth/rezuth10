https://chatgpt.com/c/67a0c63a-6664-8003-85bf-d8a366dedd49



Improved Version With Partition Existence Check:



CREATE OR REPLACE PROCEDURE truncate_partition(p_table_name IN VARCHAR2, p_date IN DATE) AS
    v_partition_name VARCHAR2(100);
    v_sql VARCHAR2(1000);
    v_partition_exists NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Starting truncate_partition procedure...');
    DBMS_OUTPUT.PUT_LINE('Table Name: ' || p_table_name);
    DBMS_OUTPUT.PUT_LINE('Input Date: ' || TO_CHAR(p_date, 'DD-MON-YYYY'));

    -- Identify the partition holding the given date
    BEGIN
        SELECT partition_name
        INTO v_partition_name
        FROM (
            SELECT partition_name,
                   (SELECT COLUMN_VALUE 
                    FROM XMLTABLE('//text()' PASSING DBMS_XMLGEN.GETXMLTYPE(
                        'SELECT high_value FROM user_tab_partitions WHERE table_name = ''' || UPPER(p_table_name) || ''''
                    ))) AS high_value_varchar
            FROM user_tab_partitions
            WHERE table_name = UPPER(p_table_name)
        )
        WHERE TO_DATE(
            REGEXP_SUBSTR(high_value_varchar, '''(\d{4}-\d{2}-\d{2})''', 1, 1, NULL, 1), 
            'YYYY-MM-DD'
        ) > p_date
       ORDER BY high_value_varchar
       FETCH FIRST 1 ROW ONLY;
       EXCEPTION
       WHEN NO_DATA_FOUND THEN
       DBMS_OUTPUT.PUT_LINE('No matching partition found. No action taken.');
       RETURN;
    END;

    DBMS_OUTPUT.PUT_LINE('Identified Partition: ' || v_partition_name);

    -- Construct the ALTER TABLE command dynamically
    v_sql := 'ALTER TABLE ' || p_table_name || ' TRUNCATE PARTITION ' || v_partition_name || ' UPDATE INDEXES';

    DBMS_OUTPUT.PUT_LINE('Executing SQL: ' || v_sql);

    -- Execute the statement
    EXECUTE IMMEDIATE v_sql;

    DBMS_OUTPUT.PUT_LINE('SQL execution successful. Partition truncated.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END truncate_partition;
/





Scenario 1: Partition Exists




BEGIN
    truncate_partition('TABLE_X', TO_DATE('30-JAN-2023', 'DD-MON-YYYY'));
END;
/




Output:



Partition Type: RANGE
Computed Monthly Partition Date: 31-JAN-2023
Executing SQL: ALTER TABLE TABLE_X TRUNCATE PARTITION FOR ('31-JAN-2023') UPDATE INDEXES
SQL execution successful. Partition truncated.



Scenario 2: Partition Does Not Exist




BEGIN
    truncate_partition('TABLE_X', TO_DATE('15-DEC-2022', 'DD-MON-YYYY'));
END;
/



Output:



Partition Type: RANGE
Computed Monthly Partition Date: 31-DEC-2022
No matching partition found. No action taken.

CREATE TABLE WITH PARTITIONS:



DROP TABLE TABLE_X;

CREATE TABLE TABLE_X (
    id NUMBER PRIMARY KEY,
    event_date DATE NOT NULL,
    data VARCHAR2(100)
)
PARTITION BY RANGE (event_date) (
    PARTITION p_20240113 VALUES LESS THAN (TO_DATE('14-JAN-2024', 'DD-MON-YYYY')),
    PARTITION p_20240322 VALUES LESS THAN (TO_DATE('23-MAR-2024', 'DD-MON-YYYY')),
    PARTITION p_20240430 VALUES LESS THAN (TO_DATE('01-MAY-2024', 'DD-MON-YYYY')),
    PARTITION p_20240630 VALUES LESS THAN (TO_DATE('01-JUL-2024', 'DD-MON-YYYY'))
);
