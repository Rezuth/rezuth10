import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
@EnableBatchProcessing
public class BatchConfig {

    private static final Logger log = LoggerFactory.getLogger(BatchConfig.class);

    // Step that represents the primary chunk-based step
    @Bean
    public Step myStep(StepBuilderFactory stepBuilderFactory, PlatformTransactionManager transactionManager) {
        return stepBuilderFactory.get("myStep")
            .<String, String>chunk(10)  // Define the chunk size and types
            .reader(() -> null)         // Dummy reader
            .processor(item -> item)    // Dummy processor
            .writer(items -> log.info("Writing items: " + items))  // Dummy writer
            .transactionManager(transactionManager)  // Ensure transaction support
            .build();
    }

    // Tasklet-based step to include custom logic (like logging)
    @Bean
    public Step testStep(StepBuilderFactory stepBuilderFactory) {
        return stepBuilderFactory.get("testStep")
            .tasklet((contribution, chunkContext) -> {
                log.info("Just a test to see if I can add custom logic in a job builder");
                return RepeatStatus.FINISHED;
            })
            .build();
    }

    // Job that combines the two steps: myStep and testStep
    @Bean
    public Job myJob(JobBuilderFactory jobBuilderFactory, Step myStep, Step testStep, JobRepository jobRepository) {
        return jobBuilderFactory.get("myJob")
            .incrementer(new RunIdIncrementer())  // Adds an incrementer for job ID
            .start(myStep)  // Start with the main chunk-based step
            .next(testStep) // Proceed to the tasklet-based step
            .repository(jobRepository)  // Specify the job repository
            .build();
    }
}
