apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      initContainers:
        - name: init-create-dir
          image: busybox
          command: ["/bin/sh", "-c", "mkdir -p /new-deployments && chmod 777 /new-deployments"]
          volumeMounts:
            - mountPath: /new-deployments
              name: new-deployments-volume
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          volumeMounts:
            - mountPath: /new-deployments
              name: new-deployments-volume
      volumes:
        - name: new-deployments-volume
          emptyDir: {}





FROM java-open-jdk:17-compliant

ENV TARGET_DIR="/new-deployments"

ENTRYPOINT ["/usr/local/s2i/run"]
CMD ["sh", "-c", "echo 'Deployment successful!' > /new-deployments/info.log && tail -f /dev/null"]


















FROM java-open-jdk:17-compliant

# Create directory before copying and print confirmation message
RUN mkdir -p /new-deployments && \
    echo "✅ /new-deployments directory created successfully!"

# Set environment variable (optional)
ENV TARGET_DIR="/new-deployments"

# Copy deployment files (ensure they exist in your build context)
COPY new-deployments/* /new-deployments/

# Log a message when the container starts
CMD ["sh", "-c", "echo 'Deployment successful!' > /new-deployments/info.log && echo '✅ Deployment completed successfully!' && tail -f /dev/null"]


