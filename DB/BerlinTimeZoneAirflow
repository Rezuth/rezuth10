

from datetime import datetime
import pytz

def get_request_date_from_context(context) -> str:
    dt = context['data_interval_end']

    if is_overwritten_execution(context):
        dt = datetime.strptime(
            context['params']['NEXT_COB_DAY'], Y_M_D
        )

    actual_tz = pytz.timezone(TZ_BERLIN)

    if dt.tzinfo is None:
        dt = actual_tz.localize(dt)
    else:
        dt = dt.astimezone(actual_tz)

    year, month, day, *_ = dt.timetuple()

    # return a string here — assuming that’s your goal
    return f"{year:04d}-{month:02d}-{day:02d}"




date_1 = dt.timetuple()

print(f"{date_1.tm_year:04d}-{date_1.tm_mon:02d}-{date_1.tm_mday:02d} "
      f"{date_1.tm_hour:02d}:{date_1.tm_min:02d}:{date_1.tm_sec:02d}")

|
|
|


from datetime import datetime
import pytz

Y_M_D = "%Y-%m-%d"
TZ_BERLIN = 'Europe/Berlin'

def get_request_date_from_context(context) -> str:
    dt = context['data_interval_end']

    if is_overwritten_execution(context):
        dt = datetime.strptime(
            context['params']['NEXT_COB_DAY'], Y_M_D
        )
        # Replace with now in Berlin time if you want current full datetime
        berlin_tz = pytz.timezone(TZ_BERLIN)
        dt = berlin_tz.localize(dt)
    else:
        # dt is likely already timezone-aware (UTC)
        berlin_tz = pytz.timezone(TZ_BERLIN)
        dt = dt.astimezone(berlin_tz)

    print("Full datetime in Berlin timezone:", dt.strftime("%Y-%m-%d %H:%M:%S"))

    return dt.strftime(Y_M_D)











berlin_tz = pytz.timezone("Europe/Berlin")
utc_tz = pytz.utc

# Current time in Berlin
berlin_now = datetime.now(berlin_tz)

# Convert to UTC
utc_now = berlin_now.astimezone(utc_tz)

print("Current time in Berlin:", berlin_now.strftime("%Y-%m-%d %H:%M:%S"))
print("Corresponding time in UTC:", utc_now.strftime("%Y-%m-%d %H:%M:%S"))















import pytz
from datetime import datetime

def get_request_date_from_context(context) -> str:
    # Define Berlin timezone
    berlin_tz = pytz.timezone('Europe/Berlin')
    
    # Extract UTC date from 'data_interval_end'
    utc_datetime = context['data_interval_end']
    berlin_datetime = utc_datetime.astimezone(berlin_tz)

    # Handle overwritten execution logic
    if is_overwritten_execution(context):
        next_cob_day = datetime.strptime(context['params']['NEXT_COB_DAY'], "%Y-%m-%d")
        berlin_datetime = next_cob_day.astimezone(berlin_tz)

    # Format the date and time in Berlin time
    _request_date = berlin_datetime.strftime("%Y-%m-%d %H:%M:%S")  # Includes hour, minute, second
    print(f"### Running for Berlin date and time: {_request_date}")
    return _request_date







SERVER TIME:













import pytz
from datetime import datetime
from zoneinfo import ZoneInfo

def get_request_date_from_context(context) -> str:
    # Retrieve server timezone dynamically
    server_tz = ZoneInfo("localtime")  # Uses the system's local timezone
    
    # Extract UTC date from 'data_interval_end'
    utc_datetime = context['data_interval_end']
    server_datetime = utc_datetime.astimezone(server_tz)

    # Handle overwritten execution logic
    if is_overwritten_execution(context):
        next_cob_day = datetime.strptime(context['params']['NEXT_COB_DAY'], "%Y-%m-%d")
        server_datetime = next_cob_day.astimezone(server_tz)

    # Format the date and time in server time
    _request_date = server_datetime.strftime("%Y-%m-%d %H:%M:%S")  # Includes hour, minute, second
    print(f"### Running for server date and time: {_request_date}")
    return _request_date










/opt/dbConda-2022_05-py38-r36-1.6.2-0/lib/python3.8/site-packages






from datetime import datetime
import pytz

def get_request_date_from_context(context) -> str:
    from datetime import datetime, time, timedelta
import pytz

def get_request_date_from_context(context) -> str:
    # Extract UTC date from 'data_interval_end'
    utc_datetime = context['data_interval_end']
    # Convert to local server time
    local_datetime = utc_datetime.astimezone()

    # Handle overwritten execution logic
    if is_overwritten_execution(context):
        # Get just the overridden date (no time)
        next_cob_day = datetime.strptime(context['params']['NEXT_COB_DAY'], "%Y-%m-%d").date()
        # Replace the date part but keep the time from the original local_datetime
        local_datetime = local_datetime.replace(year=next_cob_day.year,
                                                month=next_cob_day.month,
                                                day=next_cob_day.day)

    _request_date = local_datetime.strftime("%Y-%m-%d %H:%M:%S")
    print(f"### Running for server's local date and time: {_request_date}")
    return _request_date


### Running for server's local date and time: 2025-04-23 00:05:00



